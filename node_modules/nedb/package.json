{
  "name": "nedb",
  "version": "0.4.1",
  "author": {
    "name": "tldr.io",
    "email": "hello@tldr.io"
  },
  "contributors": [
    {
      "name": "Louis Chatriot"
    }
  ],
  "description": "File-based embedded data store for node.js",
  "keywords": [
    "database",
    "datastore",
    "embedded"
  ],
  "homepage": "https://github.com/louischatriot/node-embedded-db",
  "repository": {
    "type": "git",
    "url": "git@github.com:louischatriot/node-embedded-db.git"
  },
  "dependencies": {
    "async": "~0.2.8",
    "underscore": "~1.4.4"
  },
  "devDependencies": {
    "chai": "1.0.x",
    "mocha": "1.4.x",
    "request": "2.9.x",
    "sinon": "1.3.x",
    "exec-time": "0.0.2"
  },
  "scripts": {
    "test": "make test"
  },
  "main": "index",
  "licence": "MIT",
  "readme": "# NeDB (Node embedded database)\n\n<img src=\"http://i.imgur.com/GdeQBmc.png\" style=\"width: 25%; height: 25%; float: left;\">\n\n**Embedded persistent database for Node.js, with no dependency** (except npm\nmodules of course). You can **think of it as a SQLite for Node.js projects**, which\ncan be used in your projects with a simple `require` statement. The API is a subset of MongoDB's.\n\n\n## Installation, tests\nModule name on npm is `nedb`.\n```javascript\nnpm install nedb --save   // Put latest version in your package.json\n\nmake test   // You'll need the dev dependencies to test it\n```\n\n## API\nIt's a subset of MongoDB's API (the most used operations). The current API will not change, but I will add operations as they are needed.\n\n### Creating/loading a database\n```javascript\nvar Datastore = require('nedb')\n  , db = new Datastore('path/to/datafile');\n  \ndb.loadDatabase(function (err) {    // Callback is optional\n  // err is the error, if any\n});\n\n// Of course you can create multiple datastores if you need several\n// collections. For example:\ndb = {};\ndb.users = new Datastore('path/to/users.db');\ndb.robots = new Datastore('path/to/robots.db');\n\n// You need to load each database (here we do it asynchronously)\ndb.users.loadDatabase();\ndb.robots.loadDatabase();\n```\n\n### Inserting documents\nThe native types are `String`, `Number`, `Boolean`, `Date` and `null`. You can also use\narrays and subdocuments (objects). If a field is `undefined`, it will not be saved (this is different from \nMongoDB which transforms `undefined` in `null`, something I find counter-intuitive).  \n\nIf you specify an `_id` field, it will be used as the document's id, otherwise nedb will generate one randomly.\nNote that the generated `_id` is a simple string, not an `ObjectId`.  \n\nField names cannot begin by '$' or contain a '.'.\n\n```javascript\nvar document = { hello: 'world'\n               , n: 5\n               , today: new Date()\n               , nedbIsAwesome: true\n               , notthere: null\n               , notToBeSaved: undefined  // Will not be saved\n               , fruits: [ 'apple', 'orange', 'pear' ]\n               , infos: { name: 'nedb' }\n               };\n\ndb.insert(document, function (err, newDoc) {   // Callback is optional\n  // newDoc is the newly inserted document, including its _id\n  // newDoc has no key called notToBeSaved since its value was undefined\n});\n```\n\n### Finding documents\nUse `find` to look for multiple documents matching you query, or `findOne` to look for one specific document. You can select documents based on field equality or use comparison operators (`$lt`, `$lte`, `$gt`, `$gte`, `$in`, `$nin`, `$ne`). You can also use logical operators `$or`, `$and` and `$not`. See below for the syntax.\n\n#### Basic querying\n\n```javascript\n// Let's say our datastore contains the following collection\n// { _id: 'id1', planet: 'Mars', system: 'solar', inhabited: false, satellites: ['Phobos', 'Deimos'] }\n// { _id: 'id2', planet: 'Earth', system: 'solar', inhabited: true, humans: { genders: 2, eyes: true } }\n// { _id: 'id3', planet: 'Jupiter', system: 'solar', inhabited: false }\n// { _id: 'id4', planet: 'Omicron Persei 8', system: 'futurama', inhabited: true, humans: { genders: 7 } }\n\n// Finding all planets in the solar system\ndb.find({ system: 'solar' }, function (err, docs) {\n  // docs is an array containing documents Mars, Earth, Jupiter\n  // If no document is found, docs is equal to []\n});\n\n// Finding all inhabited planets in the solar system\ndb.find({ system: 'solar', inhabited: true }, function (err, docs) {\n  // docs is an array containing document Earth only\n});\n\n// Use the dot-notation to match fields in subdocuments\ndb.find({ \"humans.genders\": 2 }, function (err, docs) {\n  // docs contains Earth\n});\n\n// You can also deep-compare objects. Don't confuse this with dot-notation!\ndb.find({ humans: { genders: 2 } }, function (err, docs) {\n  // docs is empty, because { genders: 2 } is not equal to { genders: 2, eyes: true }\n});\n\n// Find all documents in the collection\ndb.find({}, function (err, docs) {\n});\n\n// The same rules apply when you want to only find one document\ndb.findOne({ _id: 'id1' }, function (err, doc) {\n  // doc is the document Mars\n  // If no document is found, doc is null\n});\n```\n\n#### Comparison operators ($lt, $lte, $gt, $gte, $in, $nin, $ne)\nThe syntax is `{ field: { $op: value } }` where `$op` is any comparison operator:  \n\n* `$lt`, `$lte`: less than, less than or equal\n* `$gt`, `$gte`: greater than, greater than or equal\n* `$in`: member of. `value` must be an array of values\n* `$ne`, `$nin`: not equal, not a member of\n\n```javascript\n// $lt, $lte, $gt and $gte work on numbers and strings\ndb.find({ \"humans.genders\": { $gt: 5 } }, function (err, docs) {\n  // docs contains Omicron Persei 8, whose humans have more than 5 genders (7).\n});\n\n// When used with strings, lexicographical order is used\ndb.find({ planet: { $gt: 'Mercury' }}, function (err, docs) {\n  // docs contains Omicron Persei 8\n})\n\n// Using $in. $nin is used in the same way\ndb.find({ planet: { $in: ['Earth', 'Jupiter'] }}, function (err, docs) {\n  // docs contains Earth and Jupiter\n});\n```\n\n#### Array fields\nWhen a field in a document is an array, NeDB tries the query on every element and there is a match if at least one element matches.\n\n```javascript\n// If a document's field is an array, matching it means matching any element of the array\ndb.find({ satellites: 'Phobos' }, function (err, docs) {\n  // docs contains Mars. Result would have been the same if query had been { satellites: 'Deimos' }\n});\n\n// This also works for queries that use comparison operators\ndb.find({ satellites: { $lt: 'Amos' } }, function (err, docs) {\n  // docs is empty since Phobos and Deimos are after Amos in lexicographical order\n});\n\n// This also works with the $in and $nin operator\ndb.find({ satellites: { $in: ['Moon', 'Deimos'] } }, function (err, docs) {\n  // docs contains Mars (the Earth document is not complete!)\n});\n```\n\n#### Logical operators $or, $and, $not\nYou can combine queries using logical operators:  \n\n* For `$or` and `$and`, the syntax is `{ $op: [query1, query2, ...] }`.\n* For `$not`, the syntax is `{ $not: query }`\n\n```javascript\ndb.find({ $or: [{ planet: 'Earth' }, { planet: 'Mars' }] }, function (err, docs) {\n  // docs contains Earth and Mars\n});\n\ndb.find({ $not: { planet: 'Earth' } }, function (err, docs) {\n  // docs contains Mars, Jupiter, Omicron Persei 8\n});\n\n// You can mix normal queries, comparison queries and logical operators\ndb.find({ $or: [{ planet: 'Earth' }, { planet: 'Mars' }], inhabited: true }, function (err, docs) {\n  // docs contains Earth\n});\n\n```\n\n### Updating documents\n`db.update(query, update, options, callback)` will update all documents matching `query` according to the `update` rules:  \n* `query` is the same kind of finding query you use with `find` and `findOne`\n* `update` specifies how the documents should be modified. It is either a new document or a set of modifiers (you cannot use both together, it doesn't make sense!)\n  * A new document will replace the matched docs\n  * The available modifiers are `$set` to change a field's value and `$inc` to increment a field's value. The modifiers create the fields they need to modify if they don't exist, and you can apply them to subdocs. See examples below for the syntax\n* `options` is an object with two possible parameters\n  * `multi` (defaults to `false`) which allows the modification of several documents if set to true\n  * `upsert` (defaults to `false`) if you want to insert a new document corresponding to the `update` rules if your `query` doesn't match anything\n* `callback` (optional) signature: err, numReplaced, upsert\n  * `numReplaced` is the number of documents replaced\n  * `upsert` is set to true if the upsert mode was chosen and a document was inserted\n\n```javascript\n// Let's use the same example collection as in the \"finding document\" part\n// { _id: 'id1', planet: 'Mars', system: 'solar', inhabited: false }\n// { _id: 'id2', planet: 'Earth', system: 'solar', inhabited: true }\n// { _id: 'id3', planet: 'Jupiter', system: 'solar', inhabited: false }\n// { _id: 'id4', planet: 'Omicron Persia 8', system: 'futurama', inhabited: true }\n\n// Replace a document by another\ndb.update({ planet: 'Jupiter' }, { planet: 'Pluton'}, {}, function (err, numReplaced) {\n  // numReplaced = 1\n  // The doc #3 has been replaced by { _id: 'id3', planet: 'Pluton' }\n  // Note that the _id is kept unchanged, and the document has been replaced\n  // (the 'system' and inhabited fields are not here anymore)\n});\n\n// Set an existing field's value\ndb.update({ system: 'solar' }, { $set: { system: 'solar system' } }, { multi: true }, function (err, numReplaced) {\n  // numReplaced = 3\n  // Field 'system' on Mars, Earth, Jupiter now has value 'solar system'\n});\n\n// Setting the value of a non-existing field in a subdocument by using the dot-notation\ndb.update({ planet: 'Mars' }, { $set: { \"data.satellites\": 2, \"data.red\": true } }, {}, function () {\n  // Mars document now is { _id: 'id1', system: 'solar', inhabited: false\n  //                      , data: { satellites: 2, red: true }\n  //                      }\n  // Not that to set fields in subdocuments, you HAVE to use dot-notation\n  // Using object-notation will just replace the top-level field\n  db.update({ planet: 'Mars' }, { $set: { date: { satellites: 3 } } }, {}, function () {\n    // Mars document now is { _id: 'id1', system: 'solar', inhabited: false\n    //                      , data: { satellites: 3 }\n    //                      }\n    // You lost the \"data.red\" field which is probably not the intended behavior\n  });\n});\n\n// Upserting a document\ndb.update({ planet: 'Pluton' }, { planet: 'Pluton', inhabited: false }, { upsert: true }, function (err, numReplaced, upsert) {\n  // numReplaced = 1, upsert = true\n  // A new document { _id: 'id5', planet: 'Pluton', inhabited: false } has been added to the collection\n});\n\n// If you upsert with a modifier, the upserted doc is the query modified by the modifier\n// This is simpler than it sounds :)\ndb.update({ planet: 'Pluton' }, { $inc: { distance: 38 } }, { upsert: true }, function () {\n  // A new document { _id: 'id5', planet: 'Pluton', distance: 38 } has been added to the collection  \n});\n```\n\n### Removing documents\n`db.remove(query, options, callback)` will remove all documents matching `query` according to `options`  \n* `query` is the same as the ones used for finding and updating\n* `options` only one option for now: `multi` which allows the removal of multiple documents if set to true. Default is false\n* `callback` is optional, signature: err, numRemoved\n\n```javascript\n// Let's use the same example collection as in the \"finding document\" part\n// { _id: 'id1', planet: 'Mars', system: 'solar', inhabited: false }\n// { _id: 'id2', planet: 'Earth', system: 'solar', inhabited: true }\n// { _id: 'id3', planet: 'Jupiter', system: 'solar', inhabited: false }\n// { _id: 'id4', planet: 'Omicron Persia 8', system: 'futurama', inhabited: true }\n\n// Remove one document from the collection\n// options set to {} since the default for multi is false\ndb.remove({ _id: 'id2' }, {}, function (err, numRemoved) {\n  // numRemoved = 1\n});\n\n// Remove multiple documents\ndb.remove({ system: 'solar' }, { multi: true }, function (err, numRemoved) {\n  // numRemoved = 3\n  // All planets from the solar system were removed\n});\n```\n\n\n## Performance\n### Speed\n**NeDB is not intended to be a replacement of large-scale databases such as MongoDB!** Its goal is to provide you with a clean and easy way to query data and persist it to disk, for applications that do not need lots of concurrent connections, for example a <a href=\"https://github.com/louischatriot/braindead-ci\" target=\"_blank\">continuous integration and deployment server</a>.\n\nAs such, it was not designed for speed. That said, it is still pretty fast on the expected datasets (10,000\ndocuments max). On my machine (3 years old, no SSD), with a collection\ncontaining 10,000 documents:  \n* An insert takes 0.1ms\n* A read takes 5.7ms\n* An update takes 58ms\n* A deletion takes 57ms  \n\nYou can run the simple benchmarks I use by executing the scripts in the `benchmarks` folder. They all take an optional parameter which is the size of the dataset to use (default is 10,000). Most of the time spent during update and remove operations is IO, and I will work on optimizing this in the future (probably by switching to an append-only format).\n\n### Memory footprint\nA copy of the whole database is kept in memory. This is not much on the\nexpected kind of datasets (20MB for 10,000 2KB documents). If requested, I'll introduce an\noption to not use this cache to decrease memory footprint (at the cost\nof a lower speed).\n\n\n## Use in other services\n* <a href=\"https://github.com/louischatriot/connect-nedb-session\"\n  target=\"_blank\">connect-nedb-session</a> is a session store for\nConnect and Express, backed by nedb\n* I'm planning on making an export tool to get all your data in an nedb\n  database in a Mongo database\n\n\n## License \n\n(The MIT License)\n\nCopyright (c) 2013 Louis Chatriot &lt;louis.chatriot@gmail.com&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/louischatriot/node-embedded-db/issues"
  },
  "_id": "nedb@0.4.1",
  "dist": {
    "shasum": "14d0da24088173c111665cf0e1676828546c4895"
  },
  "_from": "nedb@",
  "_resolved": "https://registry.npmjs.org/nedb/-/nedb-0.4.1.tgz"
}
